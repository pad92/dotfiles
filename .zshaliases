#OpenSSL

alias openssl_s_client_date='f() { openssl s_client -connect $1:443 </dev/null | openssl x509 -noout -dates };f'

# Docker
## Ansible
if [ $(command -v docker) ]; then
  alias ansible-sh='docker run -it --rm \
          -v $(readlink -f $SSH_AUTH_SOCK):/ssh-agent \
          -v ${PWD}:/ansible \
          -e SSH_AUTH_SOCK=/ssh-agent \
          cloudtempleinfra/ansible-alpine:latest sh'
  alias ansible-sh-2.10.7-2='docker run -it --rm \
          -v $(readlink -f $SSH_AUTH_SOCK):/ssh-agent \
          -v ${PWD}:/ansible \
          -v /etc/ca-certificates/trust-source/anchors:/usr/local/share/ca-certificates:ro \
          -e SSH_AUTH_SOCK=/ssh-agent \
          pad92/ansible-alpine:2.10.7-2 sh'
  alias ansible-playbook='docker run -it --rm \
          -v $(readlink -f $SSH_AUTH_SOCK):/ssh-agent \
          -v ${PWD}:/ansible \
          -e SSH_AUTH_SOCK=/ssh-agent \
          pad92/ansible-alpine:latest ansible-playbook'
fi

# Arch
## remove orphans
if [ $(command -v pacman) ] && [ $(command -v yay) ]; then
  function clean_arch {
    ORPHAN=$(pacman -Qtdq)

    if [ -n "${ORPHAN}" ]; then
      echo "Remove orphans"
      sudo pacman -Rns $(pacman -Qtdq)
    fi
    yay -Scc --noconfirm
    sudo find /etc -regextype posix-extended -regex ".*\.pac(new|save|orig)$" 2> /dev/null
    paccache -ruk0
    paccache -rk1
  }
fi

## get fastest mirrors
if [ $(command -v reflector) ]; then
  alias mirror="sudo reflector -c FR -f 30 -l 30 --number 10 --verbose --save /etc/pacman.d/mirrorlist"
  alias mirrord="sudo reflector -c FR --latest 50 --number 20 --sort delay --save /etc/pacman.d/mirrorlist"
  alias mirrors="sudo reflector -c FR --latest 50 --number 20 --sort score --save /etc/pacman.d/mirrorlist"
  alias mirrora="sudo reflector -c FR --latest 50 --number 20 --sort age --save /etc/pacman.d/mirrorlist"
fi

## Update
function arch_update {
    yay -Syu --devel
    clean_arch
    if [ $(command -v flatpak) ]; then
        flatpak update -y
        flatpak uninstall --unused -y
    fi
}

# Tools
## youtube-dl
if [ $(command -v youtube-dl) ]; then
  alias yta-aac="youtube-dl --extract-audio --audio-format aac "
  alias yta-best="youtube-dl --extract-audio --audio-format best "
  alias yta-flac="youtube-dl --extract-audio --audio-format flac "
  alias yta-m4a="youtube-dl --extract-audio --audio-format m4a "
  alias yta-mp3="youtube-dl --extract-audio --audio-format mp3 "
  alias yta-opus="youtube-dl --extract-audio --audio-format opus "
  alias yta-vorbis="youtube-dl --extract-audio --audio-format vorbis "
  alias yta-wav="youtube-dl --extract-audio --audio-format wav "
  alias ytv-best="youtube-dl -f bestvideo+bestaudio "
fi

## Backup
[ -f "${HOME}/.dotfiles/bin/backup.sh" ] && \
  alias backup="${HOME}/.dotfiles/bin/backup.sh"

# Archive
function extract {
  if [ -z "$1" ]; then
    # display usage if no parameters given
    echo "Usage: extract <path/file_name>.<zip|rar|bz2|gz|tar|tbz2|tgz|Z|7z|xz|ex|tar.bz2|tar.gz|tar.xz>"
    echo "       extract <path/file_name_1.ext> [path/file_name_2.ext] [path/file_name_3.ext]"
  else
    for n in "$@"
    do
      if [ -f "$n" ] ; then
        case "${n%,}" in
          *.cbt|*.tar.bz2|*.tar.gz|*.tar.xz|*.tbz2|*.tgz|*.txz|*.tar)
            tar xvf "$n"
            ;;
          *.lzma)
            unlzma ./"$n"
            ;;
          *.bz2)
            bunzip2 ./"$n"
            ;;
          *.cbr|*.rar)
            unrar x -ad ./"$n"
            ;;
          *.gz)
            gunzip ./"$n"
            ;;
          *.cbz|*.epub|*.zip)
            unzip ./"$n"
            ;;
          *.z)
            uncompress ./"$n"
            ;;
          *.7z|*.arj|*.cab|*.cb7|*.chm|*.deb|*.dmg|*.iso|*.lzh|*.msi|*.pkg|*.rpm|*.udf|*.wim|*.xar)
            7z x ./"$n"
            ;;
          *.xz)
            unxz ./"$n"
            ;;
          *.exe)
            cabextract ./"$n"
            ;;
          *.cpio)
            cpio -id < ./"$n"
            ;;
          *.cba|*.ace)
            unace x ./"$n"
            ;;
          *)
            echo "extract: '$n' - unknown archive method"
            return 1
            ;;
        esac
      else
        echo "'$n' - file does not exist"
        return 1
      fi
    done
  fi
}

# Lsmod all with pararms
function lsmodp {
    cat /proc/modules | cut -f 1 -d " " | while read module; do
        echo "Module: $module"
        if [ -d "/sys/module/$module/parameters" ]; then
            ls /sys/module/$module/parameters/ | while read parameter; do
            echo -n "Parameter: $parameter --> "
            sudo cat /sys/module/$module/parameters/$parameter
        done
        fi
        echo
    done
}


if [ -S "${HOME}/.1password/agent.sock" ]; then
  [ -z "${SSH_CONNECTION}" ] && export SSH_AUTH_SOCK=$HOME/.1password/agent.sock
#elif [ -S "$XDG_RUNTIME_DIR/gcr/ssh" ]; then
#  [ -z "${SSH_CONNECTION}" ] && export SSH_AUTH_SOCK="${XDG_RUNTIME_DIR}/gcr/ssh"
#else
#  [ -z "${SSH_CONNECTION}" ] && export SSH_AUTH_SOCK="$XDG_RUNTIME_DIR/ssh-agent.socket"
fi

# WSL with 1Password
if [ $(command -v npiperelay.exe) ] && [ ! -z ${WSL_DISTRO_NAME+x} ]; then
  # Code extracted from https://stuartleeks.com/posts/wsl-ssh-key-forward-to-windows/

  if [ ! -d "${HOME}/.1password" ]; then
    mkdir "${HOME}/.1password"
  fi

  # Configure ssh forwarding
  # need `ps -ww` to get non-truncated command for matching
  # use square brackets to generate a regex match for the process we want but that doesn't match the grep command running it!
  ALREADY_RUNNING=$(ps -auxww | grep -q "[n]piperelay.exe -ei -s //./pipe/openssh-ssh-agent"; echo $?)
  if [[ $ALREADY_RUNNING != "0" ]]; then
      if [[ -S $SSH_AUTH_SOCK ]]; then
          # not expecting the socket to exist as the forwarding command isn't running (http://www.tldp.org/LDP/abs/html/fto.html)
          echo "removing previous socket..."
          rm $SSH_AUTH_SOCK
      fi
      echo "Starting SSH-Agent relay..."
      # setsid to force new session to keep running
      # set socat to listen on $SSH_AUTH_SOCK and forward to npiperelay which then forwards to openssh-ssh-agent on windows
      (setsid socat UNIX-LISTEN:$SSH_AUTH_SOCK,fork EXEC:"npiperelay.exe -ei -s //./pipe/openssh-ssh-agent",nofork &) >/dev/null 2>&1
  fi
fi
